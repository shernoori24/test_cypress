# app/models/__init__.py
# Fichier d'initialisation du module models
# 
# Ce module contient les classes qui g√®rent les DONN√âES (couche Model dans le pattern MVC)
#
# === ARCHITECTURE MVC ===
# Model (models/) : Gestion des donn√©es et logique m√©tier
# View (templates/) : Interface utilisateur (HTML)
# Controller (controllers/) : Logique de routage et coordination
#
# === CONTENU DU MODULE MODELS ===
# 
# üìä data_loader.py : Classe DataLoader
#     - Chargement centralis√© des fichiers Excel
#     - Lazy loading (chargement paresseux)
#     - Cache intelligent avec v√©rification de modification
#     - Normalisation automatique des colonnes
#     - Sauvegarde s√©curis√©e des donn√©es
#
# === RESPONSABILIT√âS DU MODULE ===
# 
# ‚úÖ Ce que fait ce module :
# - Lecture/√©criture des fichiers Excel
# - Validation et nettoyage des donn√©es
# - Cache des donn√©es pour les performances
# - Normalisation des formats de colonnes
# - Gestion des erreurs de fichiers
#
# ‚ùå Ce que ne fait PAS ce module :
# - Logique d'interface utilisateur (c'est le r√¥le des templates)
# - Routage des URLs (c'est le r√¥le des controllers)
# - Communication avec l'IA (c'est le r√¥le des services)
# - Validation des formulaires (c'est le r√¥le des controllers/services)
#
# === PATTERN UTILIS√â ===
# 
# Le DataLoader utilise plusieurs patterns :
# - Singleton Pattern : Une seule instance partag√©e dans toute l'app
# - Lazy Loading : Charge les donn√©es seulement quand n√©cessaire
# - Cache Pattern : Garde les donn√©es en m√©moire pour √©viter les rechargements
# - Factory Pattern : Cr√©e les DataFrames selon le type de donn√©es
#
# === UTILISATION TYPIQUE ===
# 
# from app import data_loader  # Instance globale cr√©√©e dans app/__init__.py
# 
# # Acc√®s aux donn√©es (chargement automatique si n√©cessaire)
# inscriptions = data_loader.inscriptions  # pandas.DataFrame
# presences = data_loader.presences        # pandas.DataFrame
# 
# # Informations sur les fichiers
# info = data_loader.get_file_info()
# 
# # Rechargement forc√© si fichiers modifi√©s externes
# data_loader.reload_all()
# 
# # Sauvegarde des modifications
# data_loader.save_inscriptions(nouveau_df)
#
# === AVANTAGES DE CETTE ARCHITECTURE ===
# 
# üöÄ Performance : Cache √©vite les rechargements inutiles
# üõ°Ô∏è S√©curit√© : Validation et gestion d'erreurs centralis√©es
# üîß Maintenance : Un seul endroit pour la logique de donn√©es
# üìà √âvolutivit√© : Facile d'ajouter de nouveaux types de donn√©es
# üß™ Tests : Logique isol√©e et testable ind√©pendamment